<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Matrix</title>
  <icon>https://carlyleliu.github.io/images/favicon_200x200.png</icon>
  <subtitle>CarlyleLiu‘s Blog</subtitle>
  <link href="https://carlyleliu.github.io/atom.xml" rel="self"/>
  
  <link href="https://carlyleliu.github.io/"/>
  <updated>2025-09-27T04:36:15.395Z</updated>
  <id>https://carlyleliu.github.io/</id>
  
  <author>
    <name>CarlyleLiu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Debug tips</title>
    <link href="https://carlyleliu.github.io/Debug/Tips/"/>
    <id>https://carlyleliu.github.io/Debug/Tips/</id>
    <published>2025-09-25T11:44:15.000Z</published>
    <updated>2025-09-27T04:36:15.395Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</summary>
        
      
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/"/>
    
    <category term="Debug" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/Debug/"/>
    
    
    <category term="Debug" scheme="https://carlyleliu.github.io/tags/Debug/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>自然语言处理</title>
    <link href="https://carlyleliu.github.io/Science/NaturalLanguageProcessing/"/>
    <id>https://carlyleliu.github.io/Science/NaturalLanguageProcessing/</id>
    <published>2025-04-05T16:03:06.000Z</published>
    <updated>2025-10-26T03:13:11.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;自然语言处理发展综述&quot;&gt;&lt;a href=&quot;#自然语言处理发展综述&quot; class=&quot;headerlink&quot; title=&quot;自然语言处理发展综述&quot;&gt;&lt;/a&gt;自然语言处理发展综述&lt;/h1&gt;&lt;p&gt;语言的出现是为了人与人之间的通信。英文字母或者中文的笔划实际上是信息编码的不同单位，任何一种语言都是一种编码方式，而语言的语法规则就是编码的算法。而人类研究计算机对自然语言的处理经过60多年的发展过程，大致分为两个阶段，第一个阶段（20世纪50-70年代）没有什么实质性进展，基本上是仿照人类对语言的认知，对自然语言进行句法分析和语义分析。第二个阶段转而用统计的方法才取得了实质性突破，并得到广泛应用。&lt;br&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/67f3e38aa32bb.png&quot; alt=&quot;NaturalLanguageProcessing1.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/67f3e39dc5c69.png&quot; alt=&quot;NaturalLanguageProcessing2.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Science Thought" scheme="https://carlyleliu.github.io/categories/Science-Thought/"/>
    
    <category term="Math" scheme="https://carlyleliu.github.io/categories/Science-Thought/Math/"/>
    
    
    <category term="Math" scheme="https://carlyleliu.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>各gadget驱动配置</title>
    <link href="https://carlyleliu.github.io/LinuxDriver/LinuxUSBGadgetConf/"/>
    <id>https://carlyleliu.github.io/LinuxDriver/LinuxUSBGadgetConf/</id>
    <published>2025-04-04T13:13:11.000Z</published>
    <updated>2025-10-26T03:13:11.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Gadget驱动简介&quot;&gt;&lt;a href=&quot;#Gadget驱动简介&quot; class=&quot;headerlink&quot; title=&quot;Gadget驱动简介&quot;&gt;&lt;/a&gt;Gadget驱动简介&lt;/h1&gt;&lt;p&gt;usb驱动分为主机测设备驱动UHC和从机测设备驱动UDC。其中Gadget（意为小器件）就是从机测驱动，包含各种usb外设驱动，常见的有usb声卡驱动、usb网卡驱动、usb串口驱动、u盘、usb鼠标键盘等。其驱动层次如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/67f1500b26fe3.png&quot; alt=&quot;gadget.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;常见Gadget驱动占用ep情况&quot;&gt;&lt;a href=&quot;#常见Gadget驱动占用ep情况&quot; class=&quot;headerlink&quot; title=&quot;常见Gadget驱动占用ep情况&quot;&gt;&lt;/a&gt;常见Gadget驱动占用ep情况&lt;/h1&gt;&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;EP0&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;EP In&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;EP Out&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ADB&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1（bulk）&lt;/td&gt;
&lt;td&gt;1（bulk）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UAC&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1（isoc）&lt;/td&gt;
&lt;td&gt;1（isoc）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UAC FU&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1（int）&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UAC Async&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1（int）&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HID&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1（int）&lt;/td&gt;
&lt;td&gt;1（int）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MTP&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1（bulk）&lt;/td&gt;
&lt;td&gt;1（bulk）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RNDIS/ACM（CDC）&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2（int + bulk）&lt;/td&gt;
&lt;td&gt;1（bulk）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;我们A4/A5拥有的EP资源为EP0 + 3对EP（3个EP In + 3个EP Out），A1 拥有的资源为EP0 + 5对EP（5个EP In + 5个EP Out）。同时开启的功能占用EP资源数不能超过芯片支持的EP数。&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/categories/Technology-Blog/USB/"/>
    
    
    <category term="USB" scheme="https://carlyleliu.github.io/tags/USB/"/>
    
  </entry>
  
  <entry>
    <title>高次方程的解</title>
    <link href="https://carlyleliu.github.io/Science/QuadraticEquation/"/>
    <id>https://carlyleliu.github.io/Science/QuadraticEquation/</id>
    <published>2025-03-22T16:03:06.000Z</published>
    <updated>2025-10-26T03:13:11.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;高中时期真的很爱数学，虽然老师老是骂我不做作业，可是我真的有在努力的，只是不喜欢做题而已，嗨。高中三年我的数学课本上一直存在两段公式，一是一元三次方程的判别式和一元四次方程降阶的公式。记得当时一元三次方程用了一两个月的时间才推导出来的，其解法主要也是变量代换。其实即便拥有现代知识的我们去推导三次方程也需要花些时间的，可以先考虑非一般式的三次方程，比如没有二次项或者没有一次项，形如$x^3+bx+c = 0$这样的，其实我高中时就是这么干的，若干年后发现其实当年的诸多数学家也是这样做的，然后再通过将一般形式的三次方程转换为缺少二次项的形式进行求解。&lt;/p&gt;
&lt;p&gt;而四次方程的研究我连续研究了2个多月的晚自习也毫无头绪，完全没辙，无奈最终只能放弃，当时还很受挫，原本还做着春秋大梦想着找到所有高次方程的通解公式。可是直到一天我在新华书店看到一本书叫《人类在数学上的发现》里面提到四次方程曾经让无数数学家都束手无策（心里突然释怀了，当时还不会上网，不懂得去网上查找资料）最后是费拉里给出了解决方案，而我将这段公式从高一的数学课本抄写到高三的数学课本中（因为实在不好解，很繁杂记不住只得抄录）。于是今天打算整理下高次方程背后的故事。&lt;/p&gt;</summary>
    
    
    
    <category term="Science Thought" scheme="https://carlyleliu.github.io/categories/Science-Thought/"/>
    
    <category term="Math" scheme="https://carlyleliu.github.io/categories/Science-Thought/Math/"/>
    
    
    <category term="Math" scheme="https://carlyleliu.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>从光速不变论到狭义相对论</title>
    <link href="https://carlyleliu.github.io/Science/LightSpeed/"/>
    <id>https://carlyleliu.github.io/Science/LightSpeed/</id>
    <published>2025-03-14T16:03:06.000Z</published>
    <updated>2025-10-26T03:13:11.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;光速测量史&quot;&gt;&lt;a href=&quot;#光速测量史&quot; class=&quot;headerlink&quot; title=&quot;光速测量史&quot;&gt;&lt;/a&gt;光速测量史&lt;/h1&gt;&lt;h2 id=&quot;罗默测定光速（1676年）&quot;&gt;&lt;a href=&quot;#罗默测定光速（1676年）&quot; class=&quot;headerlink&quot; title=&quot;罗默测定光速（1676年）&quot;&gt;&lt;/a&gt;&lt;strong&gt;罗默测定光速（1676年）&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;太阳（点A）照射于木星（点B）会产生阴影（范围从木卫一轨道的点C至点D）。从地球观察，当木卫一蚀发生之时（点C），木卫一会突然消失，运行进入木星阴影，称这现象为“消踪”；当木卫一蚀结束之时（点D），木卫一会突然出现，运行离开木星阴影，称这现象为“现踪”。&lt;/p&gt;
&lt;p&gt;地球的公转轨道包含了点E、F、G、H、L、K。在任意一次木卫一蚀里，消踪与现踪不能够从地球都观察得到，因为其中一种现象必会被木星掩蔽。在冲日点（点H，地球在太阳与木星连线之间），消踪与现踪都会被木星掩蔽。在地球位置点L、K都可以观察到木卫一现踪（点D）。由于点L比点K接近点D，光波需要更多传播时间才能抵达点K。类似地，在地球位置点F、G都可以观察到木卫一消踪（点C）。由于点G比点F接近点C，光波需要较少传播时间才能抵达点G。&lt;br&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/67d6ee12999c3.jpg&quot; alt=&quot;Illustration_from_1676_article_on_Ole_Rømer&#39;s_measurement_of_the_speed_of_light.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于光线从D点到L和到K的距离不同导致在这两个点观察到的木卫一蚀时间上存在差异，&lt;strong&gt;罗默&lt;/strong&gt;就利用这个时间差以及L与K之间的距离估算出了光速，当然罗默测的光速比实际慢了26%，这是由于当时对木星的轨道根数的错误造成的误差导致的。天文学家通过对天体的观察就推算出了光速，确实非常了不起。&lt;/p&gt;</summary>
    
    
    
    <category term="Science Thought" scheme="https://carlyleliu.github.io/categories/Science-Thought/"/>
    
    <category term="Physics" scheme="https://carlyleliu.github.io/categories/Science-Thought/Physics/"/>
    
    
    <category term="Physics" scheme="https://carlyleliu.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>光的本性之争</title>
    <link href="https://carlyleliu.github.io/Science/Lightiswave/"/>
    <id>https://carlyleliu.github.io/Science/Lightiswave/</id>
    <published>2025-03-09T16:03:06.000Z</published>
    <updated>2025-10-26T03:13:11.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;我为什么会写这篇文章呢？高中时期读过几本对我影响非常大的书籍，其中一本是关于光的本质之争的书籍被我遗失了，之后也再没找到，最近在网络上搜集相关资料重新整理一下。当时读的时候关于光的波粒二象性相关实验对我触动很大，尤其那个非常恐怖的双缝干涉实验以及之后引出的一系列问题。&lt;/p&gt;</summary>
    
    
    
    <category term="Science Thought" scheme="https://carlyleliu.github.io/categories/Science-Thought/"/>
    
    <category term="Physics" scheme="https://carlyleliu.github.io/categories/Science-Thought/Physics/"/>
    
    
    <category term="Physics" scheme="https://carlyleliu.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>UAC 框架梳理</title>
    <link href="https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACFramework/"/>
    <id>https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACFramework/</id>
    <published>2025-01-10T13:13:11.000Z</published>
    <updated>2025-10-26T03:13:11.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;UAC-框架梳理&quot;&gt;&lt;a href=&quot;#UAC-框架梳理&quot; class=&quot;headerlink&quot; title=&quot;UAC 框架梳理&quot;&gt;&lt;/a&gt;UAC 框架梳理&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/67b94f845baed.png&quot; alt=&quot;USB-Framework.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;UAC-Host&quot;&gt;&lt;a href=&quot;#UAC-Host&quot; class=&quot;headerlink&quot; title=&quot;UAC Host&quot;&gt;&lt;/a&gt;UAC Host&lt;/h1&gt;&lt;h2 id=&quot;UAC-Host-流程&quot;&gt;&lt;a href=&quot;#UAC-Host-流程&quot; class=&quot;headerlink&quot; title=&quot;UAC Host 流程&quot;&gt;&lt;/a&gt;&lt;strong&gt;UAC Host 流程&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/67b94fb62ba66.png&quot; alt=&quot;UAC Host调用流程.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码流程都是类似的找到sound/usb/pcm.c文件里的struct snd_pcm_ops 结构体，相关回调都在这里：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;snd_pcm_ops&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;snd_usb_playback_ops&lt;/span&gt; =&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.open =		snd_usb_pcm_open,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.close =	snd_usb_pcm_close,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.hw_params =	snd_usb_pcm_hw_params,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.hw_free =	snd_usb_pcm_hw_free,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.prepare =	snd_usb_pcm_prepare,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.trigger =	snd_usb_substream_playback_trigger,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.sync_stop =	snd_usb_pcm_sync_stop,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.pointer =	snd_usb_pcm_pointer,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.ack =		snd_usb_pcm_playback_ack,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要关注下snd_usb_substream_playback_trigger函数，收到SNDRV_PCM_TRIGGER_START消息后会调用start_endpoints(subs);将usb 端点启动，然后注册端点操作函数指针，主要有两个：prepare_data_urb 和retire_data_urb 其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prepare_data_urb 就是负责将alsa hw buffer里的数据搬运到urb ring buffer里，usb控制器会将该ring buffer里的数据送到usb总线发送出去&lt;/li&gt;
&lt;li&gt;retire_data_urb 是usb传输完成后的回调函数，可以不用关心&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Pipeline&quot;&gt;&lt;a href=&quot;#Pipeline&quot; class=&quot;headerlink&quot; title=&quot;Pipeline&quot;&gt;&lt;/a&gt;Pipeline&lt;/h2&gt;&lt;p&gt;以下是之前通过打印时间戳的方式统计的数据，实际存在一些偏差。&lt;br&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/67924c4d17104.png&quot; alt=&quot;UACFM2.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/categories/Technology-Blog/USB/"/>
    
    
    <category term="UAC" scheme="https://carlyleliu.github.io/tags/UAC/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/tags/USB/"/>
    
  </entry>
  
  <entry>
    <title>一次UAC设备不识别问题追查</title>
    <link href="https://carlyleliu.github.io/Debug/LinuxUacNotIdentify/"/>
    <id>https://carlyleliu.github.io/Debug/LinuxUacNotIdentify/</id>
    <published>2025-01-03T13:39:55.000Z</published>
    <updated>2025-10-26T03:13:11.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;USB枚举流程&quot;&gt;&lt;a href=&quot;#USB枚举流程&quot; class=&quot;headerlink&quot; title=&quot;USB枚举流程&quot;&gt;&lt;/a&gt;&lt;strong&gt;USB枚举流程&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;USB连接过程&quot;&gt;&lt;a href=&quot;#USB连接过程&quot; class=&quot;headerlink&quot; title=&quot;USB连接过程&quot;&gt;&lt;/a&gt;USB连接过程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/6717886ddf1a1.png&quot; alt=&quot;UACId1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个过程包括Attached、Powered、Reset（进入Default状态）、Set Address（进入Address状态）。然后会进入config阶段，如下：&lt;/p&gt;
&lt;h2 id=&quot;Config过程&quot;&gt;&lt;a href=&quot;#Config过程&quot; class=&quot;headerlink&quot; title=&quot;Config过程&quot;&gt;&lt;/a&gt;Config过程&lt;/h2&gt;&lt;h3 id=&quot;请求device描述符&quot;&gt;&lt;a href=&quot;#请求device描述符&quot; class=&quot;headerlink&quot; title=&quot;请求device描述符&quot;&gt;&lt;/a&gt;&lt;strong&gt;请求device描述符&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/67924961e9527.png&quot; alt=&quot;UACId2.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bmRequestType：0x80表示从设备到主机，请求标准命令，接收者为设备&lt;/li&gt;
&lt;li&gt;bRequest：0x06表示读取描述符&lt;/li&gt;
&lt;li&gt;wValue: 表示要获取描述符的索类型。（高字节为描述符类型，低字节为描述符索引）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;描述符的类型有:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1——设备描述符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2——配置描述符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3——字符串描述符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4——接口描述符 //随配置描述符一并获取&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5——端点描述符 //随配置描述符一并获取&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里0x0100，表示设备描述符，索引为0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wIndex：字段表示字符串描述符的语言ID, 其它描述符为0&lt;/li&gt;
&lt;li&gt;wLength：指定了描述符的字节数，这里为0x12（18）字节&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/"/>
    
    <category term="Debug" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/Debug/"/>
    
    
    <category term="Debug" scheme="https://carlyleliu.github.io/tags/Debug/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/tags/Programming/"/>
    
    <category term="UAC" scheme="https://carlyleliu.github.io/tags/UAC/"/>
    
  </entry>
  
  <entry>
    <title>栈溢出</title>
    <link href="https://carlyleliu.github.io/Debug/stackOverflow/"/>
    <id>https://carlyleliu.github.io/Debug/stackOverflow/</id>
    <published>2024-10-05T11:44:15.000Z</published>
    <updated>2025-09-27T04:36:15.396Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Memset栈空间&quot;&gt;&lt;a href=&quot;#Memset栈空间&quot; class=&quot;headerlink&quot; title=&quot;Memset栈空间&quot;&gt;&lt;/a&gt;Memset栈空间&lt;/h1&gt;&lt;p&gt;在debug期间我们可以给栈空间赋值为一个特定值，比如0x5a，然后在每次中断中检查该值是否发生变化，来检测操作内存附近是否有内存被改写，同时该方法也可以用于统计栈最大使用情况。&lt;/p&gt;
&lt;h1 id=&quot;fstack-protector&quot;&gt;&lt;a href=&quot;#fstack-protector&quot; class=&quot;headerlink&quot; title=&quot;-fstack-protector&quot;&gt;&lt;/a&gt;-fstack-protector&lt;/h1&gt;&lt;p&gt;&lt;code&gt;-fstack-protector&lt;/code&gt; 会在函数返回地址之前插入一个保护字（称为“canary”）。如果在函数执行期间发生了缓冲区溢出，可能会覆盖这个保护字。在函数返回之前，编译器会检查这个保护字是否被修改，如果被修改，程序会立即终止，从而防止潜在的攻击。&lt;/p&gt;
&lt;p&gt;stack-protector：保护函数中通过alloca()分配缓存以及存在大于8字节的缓存。缺点是保护能力有限。&lt;br&gt;stack-protector-all：保护所有函数的栈。缺点是增加很多额外栈空间，增加程序体积。&lt;br&gt;stack-protector-strong：在stack-protector基础上，增加本地数组、指向本地帧栈地址空间保护。&lt;br&gt;stack-protector-explicit：在stack-protector基础上，增加程序中显式属性”stack_protect”空间。&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/"/>
    
    <category term="Debug" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/Debug/"/>
    
    
    <category term="Debug" scheme="https://carlyleliu.github.io/tags/Debug/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>CPUIdle</title>
    <link href="https://carlyleliu.github.io/Debug/LinuxCpuIdle/"/>
    <id>https://carlyleliu.github.io/Debug/LinuxCpuIdle/</id>
    <published>2024-08-30T11:44:15.000Z</published>
    <updated>2025-09-27T04:36:15.397Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;cpu-idle实现原理&quot;&gt;&lt;a href=&quot;#cpu-idle实现原理&quot; class=&quot;headerlink&quot; title=&quot;cpu idle实现原理&quot;&gt;&lt;/a&gt;cpu idle实现原理&lt;/h1&gt;&lt;p&gt;通过wfi或wfe指令进入low-power-state。在low-power-state下cpu core保持上电状态，但其大部分时钟停止或者进入时钟门限。这意味着core的绝大部分都处于static state，唯一消耗的功率是用于寻找中断唤醒条件的泄漏电流和少量逻辑时钟。进入low-power-state后将暂停当前的工作直到某个中断或event事件发生会退出low-power-state进入正常运行state。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/2024/09/01/66d340abd8310.png&quot; alt=&quot;cpuidle1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/2024/09/01/66d340d3ac355.png&quot; alt=&quot;cpuidle2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;其唤醒wfi或wfe的interrupt或者event请参考《The AArch64 System Level Programmers’ Model 》D1.6 Mechanisms for entering a low-power state&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/2024/09/01/66d3410fd3e5d.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/"/>
    
    <category term="Debug" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/Debug/"/>
    
    
    <category term="Debug" scheme="https://carlyleliu.github.io/tags/Debug/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>记录一次UAC 丢包问题分析过程</title>
    <link href="https://carlyleliu.github.io/Debug/LinuxperfdebugExample/"/>
    <id>https://carlyleliu.github.io/Debug/LinuxperfdebugExample/</id>
    <published>2024-08-28T11:44:15.000Z</published>
    <updated>2025-09-27T04:36:15.396Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;实验&quot;&gt;&lt;a href=&quot;#实验&quot; class=&quot;headerlink&quot; title=&quot;实验&quot;&gt;&lt;/a&gt;实验&lt;/h1&gt;&lt;p&gt;测试发现period_size=512或者256时均不发生丢包，于是做以下实验：&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;sampling rate&lt;/th&gt;
&lt;th&gt;channel&lt;/th&gt;
&lt;th&gt;bit depth&lt;/th&gt;
&lt;th&gt;period_size&lt;/th&gt;
&lt;th&gt;package size&lt;/th&gt;
&lt;th&gt;是否丢包&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;48k&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;16bit&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;4096Byte&lt;/td&gt;
&lt;td&gt;丢包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48k&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;16bit&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;2048Byte&lt;/td&gt;
&lt;td&gt;丢包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48k&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;16bit&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;2048Byte&lt;/td&gt;
&lt;td&gt;不丢包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48k&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;16bit&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;4096Byte&lt;/td&gt;
&lt;td&gt;不丢包&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;通过实验发现，丢包与period_size相关与package size无关。&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/"/>
    
    <category term="Debug" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/Debug/"/>
    
    
    <category term="Debug" scheme="https://carlyleliu.github.io/tags/Debug/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>Encryption Algorithm</title>
    <link href="https://carlyleliu.github.io/Embedded/EncryptionAlgorithm/"/>
    <id>https://carlyleliu.github.io/Embedded/EncryptionAlgorithm/</id>
    <published>2024-08-23T12:22:04.000Z</published>
    <updated>2025-09-27T04:36:15.394Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;AES&quot;&gt;&lt;a href=&quot;#AES&quot; class=&quot;headerlink&quot; title=&quot;AES&quot;&gt;&lt;/a&gt;AES&lt;/h1&gt;&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JUFCJTk4JUU3JUJBJUE3JUU1JThBJUEwJUU1JUFGJTg2JUU2JUEwJTg3JUU1JTg3JTg2&quot;&gt;AES（Advanced Encryption Standard）&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES。其密钥长度则可以是128，192或256比特。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/carlyleliu/ImageHosting/TechnologyBlog/TEE/aes1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="TEE" scheme="https://carlyleliu.github.io/categories/Technology-Blog/TEE/"/>
    
    
    <category term="TEE" scheme="https://carlyleliu.github.io/tags/TEE/"/>
    
  </entry>
  
  <entry>
    <title>Secure Boot</title>
    <link href="https://carlyleliu.github.io/Embedded/SecureBoot/"/>
    <id>https://carlyleliu.github.io/Embedded/SecureBoot/</id>
    <published>2024-08-19T02:22:04.000Z</published>
    <updated>2025-09-27T04:36:15.395Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h1&gt;&lt;p&gt;安全启动的根本目的是为了防止消费者从软硬件层面对产品的部分关键系统进行读写、调试等高权限的操作。以限制消费者的能力，来达到保护产品的商业机密、知识产权等厂家权益的目的。当然，厂家是不会这样宣传 Secure Boot 的。他们的文案通常都是通过这项技术保护用户的隐私，防止恶意软件修改系统软硬件等等。&lt;/p&gt;
&lt;p&gt;可以说，&lt;strong&gt;Secure Boot&lt;/strong&gt; 的安全模型建立在消费者是攻击者这一假设上。消费者在物理上拥有产品硬件，可以对产品进行物理连接、拆机、改装等等物理上的操作，比较专业的消费者甚至可以使用数字示波器监听 CPU 和 RAM 、eMMC 之间的数据传输来读取非常底层的数据传输。可以说跟传统的安全模型中的攻击者相比根本不在一个层面上。&lt;/p&gt;
&lt;p&gt;消费者作为攻击者的目的，一般常见的有刷机安装自定义的操作系统（Mod）、绕过厂家封闭的支付平台（IAP）和应用商城安装自定义的应用程序、绕过版权保护系统（DRM）达到复制厂家保护的数字产品内容等等。这些操作往往都会直接影响厂家的利益，因此需要一种能抵抗消费者攻击的安全机制。&lt;/p&gt;
&lt;p&gt;而且像 eMMC 这种芯片通常都是业界标准化的，攻击者甚至可以把芯片拆下来，然后用市面上现成的通用 eMMC 编程工具来读写上面的内容。&lt;/p&gt;
&lt;p&gt;Secure Boot 安全机制的原理，就是将最为核心的安全机制整合到最关键的主 CPU 中。因此就算攻击者可以监听电路板上的线路，甚至拆装个别芯片单独调试，也无法破坏 Secure Boot 的安全机制。&lt;/p&gt;
&lt;h1 id=&quot;TA的安全性&quot;&gt;&lt;a href=&quot;#TA的安全性&quot; class=&quot;headerlink&quot; title=&quot;TA的安全性&quot;&gt;&lt;/a&gt;TA的安全性&lt;/h1&gt;&lt;p&gt;保证TA的安全需要做到三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;唯一性：由设备厂商发布，确保是由设备厂商自己发布的，而不是经过客户自己替换的&lt;/li&gt;
&lt;li&gt;完整性：除了要保证TA是由设备厂商发布外还需要确保其内容没有经过改动，被用户修改了TA里面的内容&lt;/li&gt;
&lt;li&gt;保密性：内容经过加密，别人从系统中导出TA固件也无法获取真实的信息，无法解密&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="TEE" scheme="https://carlyleliu.github.io/categories/Technology-Blog/TEE/"/>
    
    
    <category term="TEE" scheme="https://carlyleliu.github.io/tags/TEE/"/>
    
  </entry>
  
  <entry>
    <title>TEE 软件交互流程</title>
    <link href="https://carlyleliu.github.io/Embedded/TEESoftPipeLine/"/>
    <id>https://carlyleliu.github.io/Embedded/TEESoftPipeLine/</id>
    <published>2024-08-17T02:22:04.000Z</published>
    <updated>2025-09-27T04:36:15.394Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;TEE软件框架&quot;&gt;&lt;a href=&quot;#TEE软件框架&quot; class=&quot;headerlink&quot; title=&quot;TEE软件框架&quot;&gt;&lt;/a&gt;TEE软件框架&lt;/h1&gt;&lt;p&gt;TEE 系统软件从整体上包含 REE 和 TEE 两部分，各自对应的基础组件如下图所示。&lt;br&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/carlyleliu/ImageHosting/TechnologyBlog/TEE/tee_soft1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REE 部分 Client Applications（CA） 一般是指指纹录入，支付应用等上层应用，其通过调用 TEE Client API 接口来与 TEE 环境的 Trusted OS 进行交互，这里的 TEE Client API 包括 TEE 厂商自定义的一些接口或 GlobalPlatform（GP） 全球组织定义的通用 API，其目的是制定一套标准的编程接口，方便开发者在不同软硬件平台下使用同一套代码实现其功能。&lt;/li&gt;
&lt;li&gt;TEE Client API 通过 ioctl 系统调用对 TEE Driver 进行操作，TEE Driver 是沟通 REE 和 TEE 的桥梁，其通过 SMC 指令，实现将上层的 OpenSession，InvokeCommand，CloseSession 等标准调用的请求转发到 TEE 环境，同时其也会处理来自 TEE 的请求，将请求转发到 TEE Helper Daemon 让其处理。&lt;/li&gt;
&lt;li&gt;TEE Helper Daemon 是一个辅助进程，用于 TEE 请求 REE 的资源。 一般来说，TEE 需要获得存储在 EMMC 的数据文件（例如安全加密文件，TA 可执行镜像文件等），而读写 EMMC 操作需要复杂的内核驱动的支持，显然如果把读写 EMMC 的驱动放到 TEE 侧运行会使软件复杂度会变得很高，因此 REE 需要一个可以访问这些资源的辅助进程支持，这就是 TEE Helper Daemon 的基本功能。TEE Helper Daemon 在软件逻辑实现上比较简单，以 OP-TEE 的 tee-supplicant 辅助进程为例，整体上是一个循环流程: 其首先通过 ioctl 接口查询是否有来自 TEE 的请求，如果没有，则进入睡眠等待状态，等待 TEE Driver 的唤醒信号，当 TEE Driver 收到来自 TEE 的请求后，会唤醒 tee-supplicant 辅助进程，然后根据请求号进行相应处理（读写数据文件，读写 EMMC 设备分区等），最后返回结果到 TEE Driver，完成一次循环，具体实现可参照《OP-TEE 中 tee-supplicant 执行流程》&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="TEE" scheme="https://carlyleliu.github.io/categories/Technology-Blog/TEE/"/>
    
    
    <category term="TEE" scheme="https://carlyleliu.github.io/tags/TEE/"/>
    
  </entry>
  
  <entry>
    <title>RPMB 简介</title>
    <link href="https://carlyleliu.github.io/Embedded/RPMB/"/>
    <id>https://carlyleliu.github.io/Embedded/RPMB/</id>
    <published>2024-08-15T02:22:04.000Z</published>
    <updated>2025-09-27T04:36:15.394Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;信息安全&quot;&gt;&lt;a href=&quot;#信息安全&quot; class=&quot;headerlink&quot; title=&quot;信息安全&quot;&gt;&lt;/a&gt;信息安全&lt;/h1&gt;&lt;p&gt;信息安全的三个基本目标是机密性，完整性和可用性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机密性意味着只有授权实体才能阅读和理解保密的信息。没有访问权限的其他人无法阅读或理解机密信息；&lt;/li&gt;
&lt;li&gt;完整性意味着能够确保信息受到保护，以防止未经授权的更改，修改或删除。信息的完整性包括使用识别和认证等方法的起源，完整性和正确性；&lt;/li&gt;
&lt;li&gt;可用性意味着信息始终可供授权用户使用。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="TEE" scheme="https://carlyleliu.github.io/categories/Technology-Blog/TEE/"/>
    
    
    <category term="TEE" scheme="https://carlyleliu.github.io/tags/TEE/"/>
    
  </entry>
  
  <entry>
    <title>TEE 实现原理</title>
    <link href="https://carlyleliu.github.io/Embedded/TEEImplementationPrinciple/"/>
    <id>https://carlyleliu.github.io/Embedded/TEEImplementationPrinciple/</id>
    <published>2024-08-14T02:22:04.000Z</published>
    <updated>2025-09-27T04:36:15.394Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;TrustZone&quot;&gt;&lt;a href=&quot;#TrustZone&quot; class=&quot;headerlink&quot; title=&quot;TrustZone&quot;&gt;&lt;/a&gt;TrustZone&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/carlyleliu/ImageHosting/TechnologyBlog/TEE/tee1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何区分当前访问状态是安全状态下的访问还是非安全状态下的访问？&quot;&gt;&lt;a href=&quot;#如何区分当前访问状态是安全状态下的访问还是非安全状态下的访问？&quot; class=&quot;headerlink&quot; title=&quot;如何区分当前访问状态是安全状态下的访问还是非安全状态下的访问？&quot;&gt;&lt;/a&gt;如何区分当前访问状态是安全状态下的访问还是非安全状态下的访问？&lt;/h2&gt;&lt;p&gt;CPU发出的地址都是虚拟地址，需要经过页表转换才能得到物理地址，其中在pte页表中低12bit（针对4k大小的页表）为控制位，用来控制页表的访问属性，也就是说在页表建立的时候就确定了访问状态是安全状态还是非安全状态，其pte低12bit如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/carlyleliu/ImageHosting/TechnologyBlog/TEE/tee2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="TEE" scheme="https://carlyleliu.github.io/categories/Technology-Blog/TEE/"/>
    
    
    <category term="TEE" scheme="https://carlyleliu.github.io/tags/TEE/"/>
    
  </entry>
  
  <entry>
    <title>Blog 搭建</title>
    <link href="https://carlyleliu.github.io/Tools/HexoNextUsage/"/>
    <id>https://carlyleliu.github.io/Tools/HexoNextUsage/</id>
    <published>2024-07-14T03:59:43.000Z</published>
    <updated>2025-09-27T04:36:15.365Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;安装-hexo&quot;&gt;&lt;a href=&quot;#安装-hexo&quot; class=&quot;headerlink&quot; title=&quot;安装 hexo&quot;&gt;&lt;/a&gt;安装 hexo&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-cli -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo init blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用 pandoc 渲染器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm un hexo-renderer-marked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i hexo-renderer-pandoc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm un hexo-renderer-pandoc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i hexo-renderer-markdown-it-plus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install pandoc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install prism&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# rss&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-feed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# butterfly&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install badge-maker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-butterfly-footer-beautify --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 页面加密&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save hexo-blog-encrypt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 外挂tag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-butterfly-tag-plugins-plus --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# rss fab&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-feed --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# artitalk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm uninstall hexo-butterfly-artitalk --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-butterfly-artitalk-pro --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# aplay tag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save hexo-tag-aplayer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;卸载 hexo 默认 markdown 渲染器，安装 pandoc markdown 渲染器。hexo 默认的 markdown 渲染器不支持 Mathjax，不支持插件扩展，不支持 emoji 表情。pandoc markdown 渲染器支持 Mathjax 语法，不仅可以渲染 markdown，还支持 textile，reStructedText 和许多其他格式，仍然不支持 emoji 表情。&lt;/p&gt;
&lt;p&gt;此外还有其他 markdown 渲染器，hexo-renderer-markdown-it 支持 Mathjax 语法（支持不太好），支持 Markdown 以及 CommonMark 语法，渲染速度比 hexo-renderer-marked 快，支持插件配置，支持标题带安全的 id 信息，支持脚注（上标，下标，下划线）。&lt;br&gt;hexo-renderer-markdown-it-plus 支持 Katex 插件并默认启用，默认启用插件列表：markdown-it-emoji，markdown-it-sub，markdown-it-sup，markdown-it-deflist，markdown-it-abbr，markdown-it-footnote，markdown-it-ins，markdown-it-mark，@iktakahiro/markdown-it-katex，markdown-it-toc-and-anchor。&lt;/p&gt;
&lt;p&gt;这里要吐槽一下各版本的 markdown 渲染器，对 latex 语法的支持真是一言难尽，pandoc 用了一段时间发现某些特性不支持打算换一个，然后 latex 公式各种崩，😔毁灭吧。&lt;/p&gt;</summary>
    
    
    
    <category term="Share" scheme="https://carlyleliu.github.io/categories/Share/"/>
    
    <category term="Tools" scheme="https://carlyleliu.github.io/categories/Share/Tools/"/>
    
    
    <category term="Tools" scheme="https://carlyleliu.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>NAS 有趣的 Docker 推荐</title>
    <link href="https://carlyleliu.github.io/Tools/NasDockerUsage/"/>
    <id>https://carlyleliu.github.io/Tools/NasDockerUsage/</id>
    <published>2024-07-01T03:59:43.000Z</published>
    <updated>2025-09-27T04:36:15.366Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</summary>
        
      
    
    
    
    <category term="Share" scheme="https://carlyleliu.github.io/categories/Share/"/>
    
    <category term="Tools" scheme="https://carlyleliu.github.io/categories/Share/Tools/"/>
    
    
    <category term="Tools" scheme="https://carlyleliu.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>UAC（九）UAC 常见问题</title>
    <link href="https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACCommonIssue/"/>
    <id>https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACCommonIssue/</id>
    <published>2024-06-30T05:15:01.000Z</published>
    <updated>2025-09-27T04:36:15.391Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;修改UAC配置参数后无法正常通信&quot;&gt;&lt;a href=&quot;#修改UAC配置参数后无法正常通信&quot; class=&quot;headerlink&quot; title=&quot;修改UAC配置参数后无法正常通信&quot;&gt;&lt;/a&gt;修改UAC配置参数后无法正常通信&lt;/h1&gt;&lt;p&gt;如果修改了UAC的配置后出现UAC无法正常通信的问题，可以通过修改设备的idVendor和idProduct来解决，只有设备的idVendor和idProduct发生改变Windows才会重新读取设备的配置描述符。&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/categories/Technology-Blog/USB/"/>
    
    
    <category term="UAC" scheme="https://carlyleliu.github.io/tags/UAC/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/tags/USB/"/>
    
  </entry>
  
  <entry>
    <title>UAC（八）PPM 评估</title>
    <link href="https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACASYNCPPM/"/>
    <id>https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACASYNCPPM/</id>
    <published>2024-06-28T05:15:01.000Z</published>
    <updated>2025-09-27T04:36:15.392Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;USB-sof统计方法&quot;&gt;&lt;a href=&quot;#USB-sof统计方法&quot; class=&quot;headerlink&quot; title=&quot;USB sof统计方法&quot;&gt;&lt;/a&gt;USB sof统计方法&lt;/h1&gt;&lt;h2 id=&quot;打时间戳方式&quot;&gt;&lt;a href=&quot;#打时间戳方式&quot; class=&quot;headerlink&quot; title=&quot;打时间戳方式&quot;&gt;&lt;/a&gt;打时间戳方式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ktime_get_raw_ns()&lt;/strong&gt; Linux标准接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;meson_timestamp()&lt;/strong&gt; Amlogic实现的硬件定时器接口。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;sof打时间戳的时机&quot;&gt;&lt;a href=&quot;#sof打时间戳的时机&quot; class=&quot;headerlink&quot; title=&quot;sof打时间戳的时机&quot;&gt;&lt;/a&gt;sof打时间戳的时机&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;直接在SOF中断handle里打时间戳，然后将其保存到一个fifo里。&lt;/li&gt;
&lt;li&gt;通过一个hrtimer，主动查询SOF中断寄存器查看是否有SOF包，如果有SOF包则打上时间戳保存到fifo里。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;sof时间戳导出到应用层&quot;&gt;&lt;a href=&quot;#sof时间戳导出到应用层&quot; class=&quot;headerlink&quot; title=&quot;sof时间戳导出到应用层&quot;&gt;&lt;/a&gt;sof时间戳导出到应用层&lt;/h2&gt;&lt;p&gt;通过seq file创建一个proc（/proc/sof_ts）文件，应用通过读取该文件来获取sof时间戳。&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/categories/Technology-Blog/USB/"/>
    
    
    <category term="UAC" scheme="https://carlyleliu.github.io/tags/UAC/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/tags/USB/"/>
    
  </entry>
  
</feed>
