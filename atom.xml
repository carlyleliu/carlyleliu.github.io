<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Matrix</title>
  <icon>https://carlyleliu.github.io/images/favicon_200x200.png</icon>
  <subtitle>CarlyleLiu‘s Blog</subtitle>
  <link href="https://carlyleliu.github.io/atom.xml" rel="self"/>
  
  <link href="https://carlyleliu.github.io/"/>
  <updated>2025-09-27T04:36:15.361Z</updated>
  <id>https://carlyleliu.github.io/</id>
  
  <author>
    <name>CarlyleLiu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://carlyleliu.github.io/Note/linux%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA/"/>
    <id>https://carlyleliu.github.io/Note/linux%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA/</id>
    <published>2025-09-27T04:36:15.361Z</published>
    <updated>2025-09-27T04:36:15.361Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Debug tips</title>
    <link href="https://carlyleliu.github.io/Debug/Tips/"/>
    <id>https://carlyleliu.github.io/Debug/Tips/</id>
    <published>2025-09-25T11:44:15.000Z</published>
    <updated>2025-09-27T04:36:15.395Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</summary>
        
      
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/"/>
    
    <category term="Debug" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/Debug/"/>
    
    
    <category term="Debug" scheme="https://carlyleliu.github.io/tags/Debug/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>栈溢出</title>
    <link href="https://carlyleliu.github.io/Debug/stackOverflow/"/>
    <id>https://carlyleliu.github.io/Debug/stackOverflow/</id>
    <published>2024-10-05T11:44:15.000Z</published>
    <updated>2025-09-27T04:36:15.396Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;memset栈空间&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#memset栈空间&quot;&gt;&lt;/a&gt; Memset栈空间&lt;/h1&gt;
&lt;p&gt;在debug期间我们可以给栈空间赋值为一个特定值，比如0x5a，然后在每次中断中检查该值是否发生变化，来检测操作内存附近是否有内存被改写，同时该方法也可以用于统计栈最大使用情况。&lt;/p&gt;
&lt;h1 id=&quot;-fstack-protector&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#-fstack-protector&quot;&gt;&lt;/a&gt; -fstack-protector&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;-fstack-protector&lt;/code&gt;&amp;nbsp;会在函数返回地址之前插入一个保护字（称为“canary”）。如果在函数执行期间发生了缓冲区溢出，可能会覆盖这个保护字。在函数返回之前，编译器会检查这个保护字是否被修改，如果被修改，程序会立即终止，从而防止潜在的攻击。&lt;/p&gt;
&lt;p&gt;stack-protector：保护函数中通过alloca()分配缓存以及存在大于8字节的缓存。缺点是保护能力有限。&lt;br&gt;
stack-protector-all：保护所有函数的栈。缺点是增加很多额外栈空间，增加程序体积。&lt;br&gt;
stack-protector-strong：在stack-protector基础上，增加本地数组、指向本地帧栈地址空间保护。&lt;br&gt;
stack-protector-explicit：在stack-protector基础上，增加程序中显式属性&quot;stack_protect&quot;空间。&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/"/>
    
    <category term="Debug" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/Debug/"/>
    
    
    <category term="Debug" scheme="https://carlyleliu.github.io/tags/Debug/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>CPUIdle</title>
    <link href="https://carlyleliu.github.io/Debug/LinuxCpuIdle/"/>
    <id>https://carlyleliu.github.io/Debug/LinuxCpuIdle/</id>
    <published>2024-08-30T11:44:15.000Z</published>
    <updated>2025-09-27T04:36:15.397Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;cpu-idle实现原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cpu-idle实现原理&quot;&gt;&lt;/a&gt; cpu idle实现原理&lt;/h1&gt;
&lt;p&gt;通过wfi或wfe指令进入low-power-state。在low-power-state下cpu core保持上电状态，但其大部分时钟停止或者进入时钟门限。这意味着core的绝大部分都处于static state，唯一消耗的功率是用于寻找中断唤醒条件的泄漏电流和少量逻辑时钟。进入low-power-state后将暂停当前的工作直到某个中断或event事件发生会退出low-power-state进入正常运行state。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/2024/09/01/66d340abd8310.png&quot; alt=&quot;cpuidle1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/2024/09/01/66d340d3ac355.png&quot; alt=&quot;cpuidle2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;其唤醒wfi或wfe的interrupt或者event请参考《The AArch64 System Level Programmers’ Model 》D1.6 Mechanisms for entering a low-power state&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/i/2024/09/01/66d3410fd3e5d.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/"/>
    
    <category term="Debug" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/Debug/"/>
    
    
    <category term="Debug" scheme="https://carlyleliu.github.io/tags/Debug/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>记录一次UAC 丢包问题分析过程</title>
    <link href="https://carlyleliu.github.io/Debug/LinuxperfdebugExample/"/>
    <id>https://carlyleliu.github.io/Debug/LinuxperfdebugExample/</id>
    <published>2024-08-28T11:44:15.000Z</published>
    <updated>2025-09-27T04:36:15.396Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;实验&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#实验&quot;&gt;&lt;/a&gt; 实验&lt;/h1&gt;
&lt;p&gt;测试发现period_size=512或者256时均不发生丢包，于是做以下实验：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;sampling rate&lt;/th&gt;
&lt;th&gt;channel&lt;/th&gt;
&lt;th&gt;bit depth&lt;/th&gt;
&lt;th&gt;period_size&lt;/th&gt;
&lt;th&gt;package size&lt;/th&gt;
&lt;th&gt;是否丢包&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;48k&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;16bit&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;4096Byte&lt;/td&gt;
&lt;td&gt;丢包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48k&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;16bit&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;2048Byte&lt;/td&gt;
&lt;td&gt;丢包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48k&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;16bit&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;2048Byte&lt;/td&gt;
&lt;td&gt;不丢包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48k&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;16bit&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;4096Byte&lt;/td&gt;
&lt;td&gt;不丢包&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;通过实验发现，丢包与period_size相关与package size无关。&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/"/>
    
    <category term="Debug" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Programming/Debug/"/>
    
    
    <category term="Debug" scheme="https://carlyleliu.github.io/tags/Debug/"/>
    
    <category term="Programming" scheme="https://carlyleliu.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>Encryption Algorithm</title>
    <link href="https://carlyleliu.github.io/Embedded/EncryptionAlgorithm/"/>
    <id>https://carlyleliu.github.io/Embedded/EncryptionAlgorithm/</id>
    <published>2024-08-23T12:22:04.000Z</published>
    <updated>2025-09-27T04:36:15.394Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;aes&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#aes&quot;&gt;&lt;/a&gt; AES&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JUFCJTk4JUU3JUJBJUE3JUU1JThBJUEwJUU1JUFGJTg2JUU2JUEwJTg3JUU1JTg3JTg2&quot;&gt;AES（Advanced Encryption Standard）&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;，在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES。其密钥长度则可以是128，192或256比特。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/carlyleliu/ImageHosting/TechnologyBlog/TEE/aes1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="TEE" scheme="https://carlyleliu.github.io/categories/Technology-Blog/TEE/"/>
    
    
    <category term="TEE" scheme="https://carlyleliu.github.io/tags/TEE/"/>
    
  </entry>
  
  <entry>
    <title>Secure Boot</title>
    <link href="https://carlyleliu.github.io/Embedded/SecureBoot/"/>
    <id>https://carlyleliu.github.io/Embedded/SecureBoot/</id>
    <published>2024-08-19T02:22:04.000Z</published>
    <updated>2025-09-27T04:36:15.395Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;目的&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#目的&quot;&gt;&lt;/a&gt; 目的&lt;/h1&gt;
&lt;p&gt;安全启动的根本目的是为了防止消费者从软硬件层面对产品的部分关键系统进行读写、调试等高权限的操作。以限制消费者的能力，来达到保护产品的商业机密、知识产权等厂家权益的目的。当然，厂家是不会这样宣传 Secure Boot 的。他们的文案通常都是通过这项技术保护用户的隐私，防止恶意软件修改系统软硬件等等。&lt;/p&gt;
&lt;p&gt;可以说，&lt;strong&gt;Secure Boot&lt;/strong&gt;&amp;nbsp;的安全模型建立在消费者是攻击者这一假设上。消费者在物理上拥有产品硬件，可以对产品进行物理连接、拆机、改装等等物理上的操作，比较专业的消费者甚至可以使用数字示波器监听 CPU 和 RAM 、eMMC 之间的数据传输来读取非常底层的数据传输。可以说跟传统的安全模型中的攻击者相比根本不在一个层面上。&lt;/p&gt;
&lt;p&gt;消费者作为攻击者的目的，一般常见的有刷机安装自定义的操作系统（Mod）、绕过厂家封闭的支付平台（IAP）和应用商城安装自定义的应用程序、绕过版权保护系统（DRM）达到复制厂家保护的数字产品内容等等。这些操作往往都会直接影响厂家的利益，因此需要一种能抵抗消费者攻击的安全机制。&lt;/p&gt;
&lt;p&gt;而且像 eMMC 这种芯片通常都是业界标准化的，攻击者甚至可以把芯片拆下来，然后用市面上现成的通用 eMMC 编程工具来读写上面的内容。&lt;/p&gt;
&lt;p&gt;Secure Boot 安全机制的原理，就是将最为核心的安全机制整合到最关键的主 CPU 中。因此就算攻击者可以监听电路板上的线路，甚至拆装个别芯片单独调试，也无法破坏 Secure Boot 的安全机制。&lt;/p&gt;
&lt;h1 id=&quot;ta的安全性&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ta的安全性&quot;&gt;&lt;/a&gt; TA的安全性&lt;/h1&gt;
&lt;p&gt;保证TA的安全需要做到三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;唯一性：由设备厂商发布，确保是由设备厂商自己发布的，而不是经过客户自己替换的&lt;/li&gt;
&lt;li&gt;完整性：除了要保证TA是由设备厂商发布外还需要确保其内容没有经过改动，被用户修改了TA里面的内容&lt;/li&gt;
&lt;li&gt;保密性：内容经过加密，别人从系统中导出TA固件也无法获取真实的信息，无法解密&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="TEE" scheme="https://carlyleliu.github.io/categories/Technology-Blog/TEE/"/>
    
    
    <category term="TEE" scheme="https://carlyleliu.github.io/tags/TEE/"/>
    
  </entry>
  
  <entry>
    <title>TEE 软件交互流程</title>
    <link href="https://carlyleliu.github.io/Embedded/TEESoftPipeLine/"/>
    <id>https://carlyleliu.github.io/Embedded/TEESoftPipeLine/</id>
    <published>2024-08-17T02:22:04.000Z</published>
    <updated>2025-09-27T04:36:15.394Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;tee软件框架&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tee软件框架&quot;&gt;&lt;/a&gt; TEE软件框架&lt;/h1&gt;
&lt;p&gt;TEE 系统软件从整体上包含 REE 和 TEE 两部分，各自对应的基础组件如下图所示。&lt;br&gt;
&lt;img src=&quot;https://lsky.carlyleliu.vip/carlyleliu/ImageHosting/TechnologyBlog/TEE/tee_soft1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REE 部分 Client Applications（CA） 一般是指指纹录入，支付应用等上层应用，其通过调用 TEE Client API 接口来与 TEE 环境的 Trusted OS 进行交互，这里的 TEE Client API 包括 TEE 厂商自定义的一些接口或 GlobalPlatform（GP） 全球组织定义的通用 API，其目的是制定一套标准的编程接口，方便开发者在不同软硬件平台下使用同一套代码实现其功能。&lt;/li&gt;
&lt;li&gt;TEE Client API 通过 ioctl 系统调用对 TEE Driver 进行操作，TEE Driver 是沟通 REE 和 TEE 的桥梁，其通过 SMC 指令，实现将上层的 OpenSession，InvokeCommand，CloseSession 等标准调用的请求转发到 TEE 环境，同时其也会处理来自 TEE 的请求，将请求转发到 TEE Helper Daemon 让其处理。&lt;/li&gt;
&lt;li&gt;TEE Helper Daemon 是一个辅助进程，用于 TEE 请求 REE 的资源。 一般来说，TEE 需要获得存储在 EMMC 的数据文件（例如安全加密文件，TA 可执行镜像文件等），而读写 EMMC 操作需要复杂的内核驱动的支持，显然如果把读写 EMMC 的驱动放到 TEE 侧运行会使软件复杂度会变得很高，因此 REE 需要一个可以访问这些资源的辅助进程支持，这就是 TEE Helper Daemon 的基本功能。TEE Helper Daemon 在软件逻辑实现上比较简单，以 OP-TEE 的 tee-supplicant 辅助进程为例，整体上是一个循环流程: 其首先通过 ioctl 接口查询是否有来自 TEE 的请求，如果没有，则进入睡眠等待状态，等待 TEE Driver 的唤醒信号，当 TEE Driver 收到来自 TEE 的请求后，会唤醒 tee-supplicant 辅助进程，然后根据请求号进行相应处理（读写数据文件，读写 EMMC 设备分区等），最后返回结果到 TEE Driver，完成一次循环，具体实现可参照《OP-TEE 中 tee-supplicant 执行流程》&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="TEE" scheme="https://carlyleliu.github.io/categories/Technology-Blog/TEE/"/>
    
    
    <category term="TEE" scheme="https://carlyleliu.github.io/tags/TEE/"/>
    
  </entry>
  
  <entry>
    <title>RPMB 简介</title>
    <link href="https://carlyleliu.github.io/Embedded/RPMB/"/>
    <id>https://carlyleliu.github.io/Embedded/RPMB/</id>
    <published>2024-08-15T02:22:04.000Z</published>
    <updated>2025-09-27T04:36:15.394Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;信息安全&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#信息安全&quot;&gt;&lt;/a&gt; 信息安全&lt;/h1&gt;
&lt;p&gt;信息安全的三个基本目标是机密性，完整性和可用性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机密性意味着只有授权实体才能阅读和理解保密的信息。没有访问权限的其他人无法阅读或理解机密信息；&lt;/li&gt;
&lt;li&gt;完整性意味着能够确保信息受到保护，以防止未经授权的更改，修改或删除。信息的完整性包括使用识别和认证等方法的起源，完整性和正确性；&lt;/li&gt;
&lt;li&gt;可用性意味着信息始终可供授权用户使用。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="TEE" scheme="https://carlyleliu.github.io/categories/Technology-Blog/TEE/"/>
    
    
    <category term="TEE" scheme="https://carlyleliu.github.io/tags/TEE/"/>
    
  </entry>
  
  <entry>
    <title>TEE 实现原理</title>
    <link href="https://carlyleliu.github.io/Embedded/TEEImplementationPrinciple/"/>
    <id>https://carlyleliu.github.io/Embedded/TEEImplementationPrinciple/</id>
    <published>2024-08-14T02:22:04.000Z</published>
    <updated>2025-09-27T04:36:15.394Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;trustzone&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#trustzone&quot;&gt;&lt;/a&gt; TrustZone&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/carlyleliu/ImageHosting/TechnologyBlog/TEE/tee1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何区分当前访问状态是安全状态下的访问还是非安全状态下的访问&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#如何区分当前访问状态是安全状态下的访问还是非安全状态下的访问&quot;&gt;&lt;/a&gt; 如何区分当前访问状态是安全状态下的访问还是非安全状态下的访问？&lt;/h2&gt;
&lt;p&gt;CPU发出的地址都是虚拟地址，需要经过页表转换才能得到物理地址，其中在pte页表中低12bit（针对4k大小的页表）为控制位，用来控制页表的访问属性，也就是说在页表建立的时候就确定了访问状态是安全状态还是非安全状态，其pte低12bit如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/carlyleliu/ImageHosting/TechnologyBlog/TEE/tee2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="TEE" scheme="https://carlyleliu.github.io/categories/Technology-Blog/TEE/"/>
    
    
    <category term="TEE" scheme="https://carlyleliu.github.io/tags/TEE/"/>
    
  </entry>
  
  <entry>
    <title>Blog 搭建</title>
    <link href="https://carlyleliu.github.io/Tools/HexoNextUsage/"/>
    <id>https://carlyleliu.github.io/Tools/HexoNextUsage/</id>
    <published>2024-07-14T03:59:43.000Z</published>
    <updated>2025-09-27T04:36:15.365Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;安装-hexo&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装-hexo&quot;&gt;&lt;/a&gt; 安装 hexo&lt;/h1&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-cli -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo init blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;安装依赖&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装依赖&quot;&gt;&lt;/a&gt; 安装依赖&lt;/h1&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用 pandoc 渲染器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm un hexo-renderer-marked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i hexo-renderer-pandoc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm un hexo-renderer-pandoc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i hexo-renderer-markdown-it-plus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install pandoc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install prism&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# rss&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-feed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# butterfly&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install badge-maker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-butterfly-footer-beautify --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 页面加密&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save hexo-blog-encrypt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 外挂tag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-butterfly-tag-plugins-plus --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# rss fab&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-feed --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# artitalk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm uninstall hexo-butterfly-artitalk --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-butterfly-artitalk-pro --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# aplay tag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install --save hexo-tag-aplayer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;卸载 hexo 默认 markdown 渲染器，安装 pandoc markdown 渲染器。hexo 默认的 markdown 渲染器不支持 Mathjax，不支持插件扩展，不支持 emoji 表情。pandoc markdown 渲染器支持 Mathjax 语法，不仅可以渲染 markdown，还支持 textile，reStructedText 和许多其他格式，仍然不支持 emoji 表情。&lt;/p&gt;
&lt;p&gt;此外还有其他 markdown 渲染器，hexo-renderer-markdown-it 支持 Mathjax 语法（支持不太好），支持 Markdown 以及 CommonMark 语法，渲染速度比 hexo-renderer-marked 快，支持插件配置，支持标题带安全的 id 信息，支持脚注（上标，下标，下划线）。&lt;br&gt;
hexo-renderer-markdown-it-plus 支持 Katex 插件并默认启用，默认启用插件列表：markdown-it-emoji，markdown-it-sub，markdown-it-sup，markdown-it-deflist，markdown-it-abbr，markdown-it-footnote，markdown-it-ins，markdown-it-mark，@iktakahiro/markdown-it-katex，markdown-it-toc-and-anchor。&lt;/p&gt;
&lt;p&gt;这里要吐槽一下各版本的 markdown 渲染器，对 latex 语法的支持真是一言难尽，pandoc 用了一段时间发现某些特性不支持打算换一个，然后 latex 公式各种崩，😔毁灭吧。&lt;/p&gt;</summary>
    
    
    
    <category term="Share" scheme="https://carlyleliu.github.io/categories/Share/"/>
    
    <category term="Tools" scheme="https://carlyleliu.github.io/categories/Share/Tools/"/>
    
    
    <category term="Tools" scheme="https://carlyleliu.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>NAS 有趣的 Docker 推荐</title>
    <link href="https://carlyleliu.github.io/Tools/NasDockerUsage/"/>
    <id>https://carlyleliu.github.io/Tools/NasDockerUsage/</id>
    <published>2024-07-01T03:59:43.000Z</published>
    <updated>2025-09-27T04:36:15.366Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</summary>
        
      
    
    
    
    <category term="Share" scheme="https://carlyleliu.github.io/categories/Share/"/>
    
    <category term="Tools" scheme="https://carlyleliu.github.io/categories/Share/Tools/"/>
    
    
    <category term="Tools" scheme="https://carlyleliu.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>UAC（九）UAC 常见问题</title>
    <link href="https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACCommonIssue/"/>
    <id>https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACCommonIssue/</id>
    <published>2024-06-30T05:15:01.000Z</published>
    <updated>2025-09-27T04:36:15.391Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;修改uac配置参数后无法正常通信&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#修改uac配置参数后无法正常通信&quot;&gt;&lt;/a&gt; 修改UAC配置参数后无法正常通信&lt;/h1&gt;
&lt;p&gt;如果修改了UAC的配置后出现UAC无法正常通信的问题，可以通过修改设备的idVendor和idProduct来解决，只有设备的idVendor和idProduct发生改变Windows才会重新读取设备的配置描述符。&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/categories/Technology-Blog/USB/"/>
    
    
    <category term="USB" scheme="https://carlyleliu.github.io/tags/USB/"/>
    
    <category term="UAC" scheme="https://carlyleliu.github.io/tags/UAC/"/>
    
  </entry>
  
  <entry>
    <title>UAC（八）PPM 评估</title>
    <link href="https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACASYNCPPM/"/>
    <id>https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACASYNCPPM/</id>
    <published>2024-06-28T05:15:01.000Z</published>
    <updated>2025-09-27T04:36:15.392Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;usb-sof统计方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#usb-sof统计方法&quot;&gt;&lt;/a&gt; USB sof统计方法&lt;/h1&gt;
&lt;h2 id=&quot;打时间戳方式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#打时间戳方式&quot;&gt;&lt;/a&gt; 打时间戳方式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ktime_get_raw_ns()&lt;/strong&gt; Linux标准接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;meson_timestamp()&lt;/strong&gt; Amlogic实现的硬件定时器接口。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;sof打时间戳的时机&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sof打时间戳的时机&quot;&gt;&lt;/a&gt; sof打时间戳的时机&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;直接在SOF中断handle里打时间戳，然后将其保存到一个fifo里。&lt;/li&gt;
&lt;li&gt;通过一个hrtimer，主动查询SOF中断寄存器查看是否有SOF包，如果有SOF包则打上时间戳保存到fifo里。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;sof时间戳导出到应用层&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sof时间戳导出到应用层&quot;&gt;&lt;/a&gt; sof时间戳导出到应用层&lt;/h2&gt;
&lt;p&gt;通过seq file创建一个proc（/proc/sof_ts）文件，应用通过读取该文件来获取sof时间戳。&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/categories/Technology-Blog/USB/"/>
    
    
    <category term="USB" scheme="https://carlyleliu.github.io/tags/USB/"/>
    
    <category term="UAC" scheme="https://carlyleliu.github.io/tags/UAC/"/>
    
  </entry>
  
  <entry>
    <title>UAC（七）Async Feedback</title>
    <link href="https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACASYNCFeedback/"/>
    <id>https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACASYNCFeedback/</id>
    <published>2024-06-19T05:15:01.000Z</published>
    <updated>2025-09-27T04:36:15.389Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;buffer-统计&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#buffer-统计&quot;&gt;&lt;/a&gt; buffer 统计&lt;/h1&gt;
&lt;p&gt;采样间隔 1ms、采样 buffer 里的数据长度&lt;br&gt;
&lt;img src=&quot;https://lsky.carlyleliu.vip/carlyleliu/ImageHosting/TechnologyBlog/Linux/AudioBufferUsage.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/categories/Technology-Blog/USB/"/>
    
    
    <category term="USB" scheme="https://carlyleliu.github.io/tags/USB/"/>
    
    <category term="UAC" scheme="https://carlyleliu.github.io/tags/UAC/"/>
    
  </entry>
  
  <entry>
    <title>Linux 驱动之基础（二）DMA-API</title>
    <link href="https://carlyleliu.github.io/LinuxDriver/LinuxDriverBaseDMA-API/"/>
    <id>https://carlyleliu.github.io/LinuxDriver/LinuxDriverBaseDMA-API/</id>
    <published>2024-05-02T15:20:16.000Z</published>
    <updated>2025-09-27T04:36:15.389Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;there-are-two-types-of-dma-mappings&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#there-are-two-types-of-dma-mappings&quot;&gt;&lt;/a&gt; 😊 There are two types of DMA mappings&lt;/h1&gt;
&lt;p&gt;Consistent DM（硬件保证 cache 一致性） mappings which are usually mapped at driver initialization, unmapped at the end and for which the hardware should guarantee that the device and the CPU can access the data in parallel and will see updates made by each other without any explicit software flushing.&lt;/p&gt;
&lt;p&gt;Streaming DMA（需要软件来维护 cache 一致性） mappings which are usually mapped for one DMA transfer, unmapped right after it (unless you use dma_sync_* below) and for which hardware can optimize for sequential accesses.&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="Linux" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Linux/"/>
    
    <category term="Driver" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Linux/Driver/"/>
    
    
    <category term="Driver" scheme="https://carlyleliu.github.io/tags/Driver/"/>
    
    <category term="Linux" scheme="https://carlyleliu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 驱动之基础（一）Device-I/O</title>
    <link href="https://carlyleliu.github.io/LinuxDriver/LinuxDriverBaseDeviceIO/"/>
    <id>https://carlyleliu.github.io/LinuxDriver/LinuxDriverBaseDeviceIO/</id>
    <published>2024-04-22T13:23:06.000Z</published>
    <updated>2025-09-27T04:36:15.387Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;memory-mapped-io&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#memory-mapped-io&quot;&gt;&lt;/a&gt; Memory Mapped IO&lt;/h1&gt;
&lt;h2 id=&quot;getting-access-to-the-device&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#getting-access-to-the-device&quot;&gt;&lt;/a&gt; Getting Access to the Device&lt;/h2&gt;
&lt;p&gt;This address should not be used directly. Instead, to get an address suitable for passing to the accessor functions described below, you should call ioremap(). An address suitable for accessing the device will be returned to you.&lt;/p&gt;
&lt;p&gt;After you’ve finished using the device (say, in your module’s exit routine), call iounmap() in order to return the address space to the kernel. Most architectures allocate new address space each time you call ioremap(), and they can run out unless you call iounmap().&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="Linux" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Linux/"/>
    
    <category term="Driver" scheme="https://carlyleliu.github.io/categories/Technology-Blog/Linux/Driver/"/>
    
    
    <category term="Driver" scheme="https://carlyleliu.github.io/tags/Driver/"/>
    
    <category term="Linux" scheme="https://carlyleliu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>UAC（六）UAC 同步方式</title>
    <link href="https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACASYNC/"/>
    <id>https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACASYNC/</id>
    <published>2024-04-19T05:15:01.000Z</published>
    <updated>2025-09-27T04:36:15.386Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;同步问题原因&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#同步问题原因&quot;&gt;&lt;/a&gt; 同步问题原因&lt;/h1&gt;
&lt;h2 id=&quot;usb-isochronous-传输协议无问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#usb-isochronous-传输协议无问题&quot;&gt;&lt;/a&gt; USB Isochronous 传输（协议无问题）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/carlyleliu/ImageHosting/TechnologyBlog/Linux/USB/USB_Transfer.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;isochronous-transfer-同步问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#isochronous-transfer-同步问题&quot;&gt;&lt;/a&gt; Isochronous Transfer 同步问题&lt;/h2&gt;
&lt;p&gt;电脑播放器播放音乐时：是按一个固定的速率，比如 44.1KHZ，电脑内有一个晶振，可分频出一个 44.1KHZ，进行音乐播放，发给 USB 的数据流速率固定。USB 声卡自己得有一个晶振才能工作，它也可分频出一个 44.1KHZ，供给 I2S 信号或 DAC。&lt;/p&gt;
&lt;p&gt;问题来了，晶振是有误差的，这两个 44.1KHZ 不可能完全一模一样，电脑可能是 44.100KHZ，USB 声卡可能是 44.098KHZ，误差约 50ppm，很正常的情况。虽然声卡晶振分频出来是 44.098KHZ，但声卡认为它就是工作在 44.100KHZ 下。好吧，如果二者时钟独立运行，那么 1 个小时会误差 0.2 秒，会出现不同步！ 即电脑播了 1 个小时的数据，USB 声卡实际是无法播完的，要多 0.2 秒才能播完。 如果声卡也要 1 小时播完，那这 1 小时就需要丢掉 0.2 秒的数据。&lt;/p&gt;
&lt;p&gt;所以二者的时钟必须要同步一致才行，这就是 UAC 同步问题的原因，因此 USB 音频规定了一是采用“等时传输模式”，二是设备需要指定为 3 种同步方式之一：同步（synchronous），适应（adaptive），异步（asynchronous）。&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/categories/Technology-Blog/USB/"/>
    
    
    <category term="USB" scheme="https://carlyleliu.github.io/tags/USB/"/>
    
    <category term="UAC" scheme="https://carlyleliu.github.io/tags/UAC/"/>
    
  </entry>
  
  <entry>
    <title>UAC（五）Feature Unit</title>
    <link href="https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACFU/"/>
    <id>https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACFU/</id>
    <published>2024-04-17T13:13:11.000Z</published>
    <updated>2025-09-27T04:36:15.388Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;音量基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#音量基本概念&quot;&gt;&lt;/a&gt; 音量基本概念&lt;/h1&gt;
&lt;h3 id=&quot;声学中的分贝&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#声学中的分贝&quot;&gt;&lt;/a&gt; &lt;strong&gt;声学中的分贝&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;因为人耳的特性，我们对声音的大小感知呈对数关系。所以我们通常用分贝描述声音大小，分贝（decibel）是量度两个相同单位之数量比例的单位，主要用于度量声音强度，常用 dB 表示。声学中，声音的强度定义为声压。计算分贝值时采用 20 微帕斯卡为参考值（通常被认为是人类的最少听觉响应值，大约是 3 米以外飞行的蚊子声音）。这一参考值是人类对声音能够感知的 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTklOTglODglRTUlODAlQkMmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=&quot;&gt;阈值&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; 下限。声压是场量，因此使用声压计算分贝时使用下述版本的公式：&lt;/p&gt;
&lt;p class=&quot;katex-block&quot;&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;20&lt;/mn&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mfrac&gt;&lt;msub&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mfrac&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;L_p = 20log_{10}(&#92;frac{p_{rms}}{p_{ref}})dB
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.969438em;vertical-align:-0.286108em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15139200000000003em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.286108em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:2.079668em;vertical-align:-0.972108em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.30110799999999993em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mopen nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:1.1075599999999999em;&quot;&gt;&lt;span style=&quot;top:-2.314em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.3361079999999999em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathnormal mtight&quot; style=&quot;margin-right:0.10764em;&quot;&gt;f&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.286108em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.23em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;frac-line&quot; style=&quot;border-bottom-width:0.04em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-3.677em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:3em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.151392em;&quot;&gt;&lt;span style=&quot;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;pstrut&quot; style=&quot;height:2.7em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathnormal mtight&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mord mathnormal mtight&quot;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.15em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot; style=&quot;height:0.972108em;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.05017em;&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中的 pref 是标准参考声压值 20 微帕。&lt;/p&gt;
&lt;h3 id=&quot;分贝声音变化范围&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分贝声音变化范围&quot;&gt;&lt;/a&gt; &lt;strong&gt;分贝声音变化范围&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在编程中，我们可以用以下公式计算两个声音之间的动态范围，单位为分贝：&lt;/p&gt;
&lt;p class=&quot;katex-block&quot;&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;20&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;/&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;dB = 20 * log(A1 / A2)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.69444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.05017em;&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;∗&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;其中 A1 和 A2 是两个声音的振幅，在程序中表示每个声音样本的大小。声音采样大小（也就是量化深度）为 1bit 时，动态范围为 0，因为只可能有一个振幅。采样大小为 8bit 也就是一个字节时，最大振幅是最小振幅的 256 倍。因此，动态范围是 48 分贝，计算公式如下：&lt;/p&gt;
&lt;p class=&quot;katex-block&quot;&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;20&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;256&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;dB = 20 * log(256)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.69444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.05017em;&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;∗&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;48 分贝的动态范围大约是一个安静房间和一台运行着电动割草机之间的区别。如果将声音采样大小增加一倍到 16bit，产生的动态范围则为 96 分贝，计算公式如下：&lt;/p&gt;
&lt;p class=&quot;katex-block&quot;&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;20&lt;/mn&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;65536&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;dB = 20 * log(65536)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.69444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.05017em;&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;∗&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;mord mathnormal&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这非常接近听力最低阈值和产生痛感之间的区别，这个范围被认为非常适合还原音乐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;音量滑块与声音增幅大小线性变化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/carlyleliu/ImageHosting/TechnologyBlog/Linux/USB/fu1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/categories/Technology-Blog/USB/"/>
    
    
    <category term="USB" scheme="https://carlyleliu.github.io/tags/USB/"/>
    
    <category term="UAC" scheme="https://carlyleliu.github.io/tags/UAC/"/>
    
  </entry>
  
  <entry>
    <title>UAC（四）HID</title>
    <link href="https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACHID/"/>
    <id>https://carlyleliu.github.io/LinuxDriver/LinuxUSBUACHID/</id>
    <published>2024-04-09T12:13:21.000Z</published>
    <updated>2025-09-27T04:36:15.385Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;hid-相关概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hid-相关概念&quot;&gt;&lt;/a&gt; HID 相关概念&lt;/h1&gt;
&lt;p&gt;报表描述符由描述 HID 设备的数据项目（Item）组成，Item 的第一个字节（项目前缀）由三部分构成，&lt;strong&gt;即项目类型（item type）、项目标签（item tag）和项目长度（item size）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HID 的项目有短项目和长项目两种，其中短项目的格式如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lsky.carlyleliu.vip/carlyleliu/ImageHosting/TechnologyBlog/Linux/USB/hid1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Technology Blog" scheme="https://carlyleliu.github.io/categories/Technology-Blog/"/>
    
    <category term="USB" scheme="https://carlyleliu.github.io/categories/Technology-Blog/USB/"/>
    
    
    <category term="USB" scheme="https://carlyleliu.github.io/tags/USB/"/>
    
    <category term="UAC" scheme="https://carlyleliu.github.io/tags/UAC/"/>
    
  </entry>
  
</feed>
